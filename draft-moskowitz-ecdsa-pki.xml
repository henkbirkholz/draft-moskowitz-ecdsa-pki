<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc iprnotified="no"?>
<?rfc strict="no"?>

<rfc ipr="trust200902" docName="draft-moskowitz-ecdsa-pki-latest" category="info">

  <front>
    <title abbrev="PKI Guide">Guide for building an ECC PKI</title>

    <author initials="R." surname="Moskowitz" fullname="Robert Moskowitz">
      <organization>Huawei</organization>
      <address>
        <postal>
          <street></street>
          <city>Oak Park</city>
          <region>MI</region>
          <code>48237</code>
        </postal>
        <email>rgm@labs.htt-consult.com</email>
      </address>
    </author>
    <author initials="H." surname="Birkholz" fullname="Henk Birkholz">
      <organization>Fraunhofer SIT</organization>
      <address>
        <postal>
          <street>Rheinstrasse 75</street>
          <city>Darmstadt</city>
          <code>64295</code>
          <country>Germany</country>
        </postal>
        <email>henk.birkholz@sit.fraunhofer.de</email>
      </address>
    </author>
    <author initials="L." surname="Xia" fullname="Liang Xia">
      <organization>Huawei</organization>
      <address>
        <postal>
          <street>No. 101, Software Avenue, Yuhuatai District</street>
          <city>Nanjing</city>
          <country>China</country>
        </postal>
        <email>Frank.xialiang@huawei.com</email>
      </address>
    </author>

    <date year="2017"/>

    <area>Security Area</area>
    <workgroup>wg TBD</workgroup>
    <keyword>RFC</keyword>

    <abstract>


<t>This memo provides a guide for building a PKI (Public Key
Infrastructure) using openSSL. All certificates in this guide are
ECDSA, P-256, with SHA256 certificates. Along with common End
Entity certificates, this guide provides instructions for creating
IEEE 802.1AR iDevID Secure
Device certificates.</t>



    </abstract>


  </front>

  <middle>


<section anchor="intro" title="Introduction">

<t>The IETF has a plethora of security solutions targeted at IoT.
Yet all too many IoT products are deployed with no or
improperly configured security. In particular resource
constrained IoT devices and non-IP IoT networks have not been
well served in the IETF.</t>

<t>Additionally, more IETF (e.g. DOTS, NETCONF) efforts are
requiring secure identities, but are vague on the nature of
these identities other than to recommend use of X.509 digital
certificates and perhaps TLS.</t>

<t>This effort provides the steps, using the openSSL application,
to create such a PKI of ECDSA certificates. The goal is that
any developer or tester can follow these steps, create the
basic objects needed and establish the validity of the
standard/program design. This guide can even be used to create
a production PKI, though additional steps need to be taken.
This could be very useful to a small vendor needing to include
802.1AR iDevIDs in their product.</t>

<t>This guide was tested with openSSL 1.1.0f on Fedora 26 and
creates PEM-based certificates. DER based certificates fails
(see <xref target="DER"/>). Also, at this time, CRL and OCSP
support is for future work.</t>

</section>
<section anchor="terms" title="Terms and Definitions">

<section anchor="requirements-terminology" title="Requirements Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL
NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and
“OPTIONAL” in this document are to be interpreted as described
in <xref target="RFC2119">RFC 2119</xref>.</t>

</section>
<section anchor="notations" title="Notations">

<t>This section will contain notations</t>

</section>
<section anchor="definitions" title="Definitions">

<t>TBD</t>

</section>
</section>
<section anchor="BasicPKI" title="The Basic PKI Feature Set">

<t>A basic PKI has two levels of hierarchy: Root and Intermediate. The
Root level has the greatest risk, and is the least used. It only
signs the Intermediate level signing certificate. As such, once
the Root level is created and signs the Intermediate level
certificate it can be locked up. In fact, the Root level could
exist completely on a mSD boot card for an ARM small computer like
a RaspberryPi. A copy of this card came be made and securely
stored in a different location.</t>

<t>The Root level contains the Root certificate private key, a
database of all signed certificates, and the public certificate.
It can also contain the Intermediate level public certificate and a
Root level CRL.</t>

<t>The Intermediate level contains the Intermediate certificate
private key, the public certificate, a database of all signed
certificates, the certificate trust chain, and Intermediate level
CRL. It can also contain the End Entity public certificates. The
private key file needs to be kept securely. For example as with
the Root level, a mSD image for an ARM computer could contain the
complete Intermediate level. This image is kept offline. The End
Entity CSR is copied to it, signed, and then the signed certificate
and updated database are moved to the public image that lacks the
private key.</t>

<t>For a simple test PKI, all files can be kept on a single system
that is managed by the tester.</t>

<t>End Entities create a key pair and a Certificate Signing Request
(CSR). The private key is stored securely. The CSR is delivered
to the Intermediate level which uses the CSR to create the End
Entity certificate. This certificate, along with the trust chain
back to the root, is then returned to the End Entity.</t>

<t>There is more to a PKI, but this suffices for most development and
testing needs.</t>

</section>
<section anchor="RootLevel" title="Getting Started and the Root Level">

<t>This guide was developed on a Fedora 26 armv7hl system (Cubieboard2
SoC). It should work on most Linux and similar systems. All work
was done in a terminal window with extensive “cutting and pasting”
from a draft guide into the terminal window. Users of this guide
may find different behaviors based on their system.</t>

<section anchor="FirstStep" title="Setting up the Environment">

<t>The first step is to create the PKI environment. Modify the
variables to suit your needs.</t>

<figure><artwork><![CDATA[
export dir=/root/ca
export cadir=/root/ca
export format=pem
mkdir $dir
cd $dir
mkdir certs crl csr newcerts private
chmod 700 private
touch index.txt
touch serial
sn=8

countryName="/C=US"
stateOrProvinceName="/ST=MI"
localityName="/L=Oak Park"
organizationName="/O=HTT Consulting"
#organizationalUnitName="/OU="
organizationalUnitName=
commonName="/CN=Root CA"
DN=$countryName$stateOrProvinceName$localityName
DN=$DN$organizationName$organizationalUnitName$commonName
echo $DN
export subjectAltName=email:postmaster@htt-consult.com
]]></artwork></figure>

<t>Where:</t>

<t><list style="hanging" hangIndent="9">
  <t hangText='dir:'><vspace blankLines='0'/>
  Directory for certificate files</t>
  <t hangText='cadir:'><vspace blankLines='0'/>
  Directory for Root certificate files</t>
  <t hangText='format:'><vspace blankLines='0'/>
  File encoding: PEM or DER <vspace />
At this time only PEM works</t>
  <t hangText='sn:'><vspace blankLines='0'/>
  Serial Number length in bytes <vspace />
For a public CA the range is 8 to 19</t>
</list></t>

<t>The Serial Number length for a public PKI ranges from 8 to 19
bytes. The use of 19 rather than 20 is to accommodate the hex
representation of the Serial Number. If it has a one in the high
order bit, DER encoding rules will place a 0x00 in front.</t>

<t>The DN and SAN fields are examples. Change them to appropriate
values. If you leave one blank, it will be left out of the
Certificate. “OU” above is an example of an empty DN object.</t>

<t>Create the file, $dir/openssl-root.cnf from the contents in <xref target="Rootconfig"/>.</t>

</section>
<section anchor="RootCert" title="Create the Root Certificate">

<t>Next are the openssl commands to create the Root certificate
keypair, and the Root certificate. Included are commands to view
the file contents.</t>

<figure><artwork><![CDATA[
# Create Passworded Keypair File

openssl genpkey -aes256 -algorithm ec\
    -pkeyopt ec_paramgen_curve:prime256v1\
    -outform $format -pkeyopt ec_param_enc:named_curve\
    -out $dir/private/ca.key.$format
chmod 400 $dir/private/ca.key.$format
openssl pkey -inform $format -in private/ca.key.$format -text -noout

# Create Self-signed Root Certificate file
# 7300 days = 20 years; Intermediate CA is 10 years.

openssl req -config $dir/openssl-root.cnf\
     -set_serial 0x$(openssl rand -hex $sn)\
     -keyform $format -outform $format\
     -key $dir/private/ca.key.$format -subj "$DN"\
     -new -x509 -days 7300 -sha256 -extensions v3_ca\
     -out $dir/certs/ca.cert.$format

#

openssl x509 -inform $format -in $dir/certs/ca.cert.$format\
     -text -noout
openssl x509 -purpose -inform $format\
     -in $dir/certs/ca.cert.$format -inform $format
]]></artwork></figure>

</section>
</section>
<section anchor="IntermediateLevel" title="The Intermediate Level">

<section anchor="NextStep" title="Setting up the Intermediate Certificate Environment">

<t>The next part is to create the Intermediate PKI environment.
Modify the variables to suit your needs.</t>

<figure><artwork><![CDATA[
export dir=$cadir/intermediate
mkdir $dir
cd $dir
mkdir certs crl csr newcerts private
chmod 700 private
touch index.txt
sn=8 # hex 8 is minimum, 19 is maximum
echo 1000 > $dir/crlnumber

# cd $dir
commonName="/CN=Signing CA"
DN=$countryName$stateOrProvinceName$localityName$organizationName
DN=$DN$organizationalUnitName$commonName
echo $DN
]]></artwork></figure>

<t>Create the file, $dir/openssl-intermediate.cnf from the contents in <xref target="Intermediateconfig"/>.</t>

</section>
<section anchor="IntermediateCert" title="Create the Intermediate Certificate">

<t>Here are the openssl commands to create the Intermediate
certificate keypair, Intermediate certificate signed request (CSR),
and the Intermediate certificate. Included are commands to view
the file contents.</t>

<figure><artwork><![CDATA[
# Create Passworded Keypair File

openssl genpkey -aes256 -algorithm ec\
    -pkeyopt ec_paramgen_curve:prime256v1 \
    -outform $format -pkeyopt ec_param_enc:named_curve\
    -out $dir/private/intermediate.key.$format
chmod 400 $dir/private/intermediate.key.$format
openssl pkey -inform $format\
    -in $dir/private/intermediate.key.$format -text -noout

# Create the CSR

openssl req -config $cadir/openssl-root.cnf\
    -key $dir/private/intermediate.key.$format \
    -keyform $format -outform $format -subj "$DN" -new -sha256\
    -out $dir/csr/intermediate.csr.$format
openssl req -text -noout -verify -inform $format\
    -in $dir/csr/intermediate.csr.$format


# Create Intermediate Certificate File

openssl rand -hex $sn > $dir/serial # hex 8 is minimum, 19 is maximum
# Note 'openssl ca' does not support DER format
openssl ca -config $cadir/openssl-root.cnf -days 3650\
    -extensions v3_intermediate_ca -notext -md sha256 \
    -in $dir/csr/intermediate.csr.$format\
    -out $dir/certs/intermediate.cert.pem

chmod 444 $dir/certs/intermediate.cert.$format

openssl verify -CAfile $cadir/certs/ca.cert.$format\
     $dir/certs/intermediate.cert.$format

openssl x509 -noout -text -in $dir/certs/intermediate.cert.$format

# Create the certificate chain file

cat $dir/certs/intermediate.cert.$format\
   $cadir/certs/ca.cert.$format > $dir/certs/ca-chain.cert.$format
chmod 444 $dir/certs/ca-chain.cert.$format
]]></artwork></figure>

</section>
<section anchor="ServerCert" title="Create a Server EE Certificate">

<t>Here are the openssl commands to create a Server End Entity
certificate keypair, Server certificate signed request (CSR),
and the Server certificate. Included are commands to view
the file contents.</t>

<figure><artwork><![CDATA[
commonName=
DN=$countryName$stateOrProvinceName$localityName
DN=$DN$organizationName$organizationalUnitName$commonName
echo $DN
serverfqdn=www.example.com
emailaddr=postmaster@htt-consult.com
export subjectAltName="DNS:$serverfqdn, email:$emailaddr"
echo $subjectAltName
openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:prime256v1\
    -pkeyopt ec_param_enc:named_curve\
    -out $dir/private/$serverfqdn.key.$format
chmod 400 $dir/private/$serverfqdn.$format
openssl pkey -in $dir/private/$serverfqdn.key.$format -text -noout
openssl req -config $dir/openssl-intermediate.cnf\
    -key $dir/private/$serverfqdn.key.$format \
    -subj "$DN" -new -sha256 -out $dir/csr/$serverfqdn.csr.$format

openssl req -text -noout -verify -in $dir/csr/$serverfqdn.csr.$format

openssl rand -hex $sn > $dir/serial # hex 8 is minimum, 19 is maximum
# Note 'openssl ca' does not support DER format
openssl ca -config $dir/openssl-intermediate.cnf -days 375\
    -extensions server_cert -notext -md sha256 \
    -in $dir/csr/$serverfqdn.csr.$format\
    -out $dir/certs/$serverfqdn.cert.$format
chmod 444 $dir/certs/$serverfqdn.cert.$format

openssl verify -CAfile $dir/certs/ca-chain.cert.$format\
     $dir/certs/$serverfqdn.cert.$format
openssl x509 -noout -text -in $dir/certs/$serverfqdn.cert.$format
]]></artwork></figure>

</section>
<section anchor="ClientCert" title="Create a Client EE Certificate">

<t>Here are the openssl commands to create a Client End Entity
certificate keypair, Client certificate signed request (CSR),
and the Client certificate. Included are commands to view
the file contents.</t>

<figure><artwork><![CDATA[
commonName=
UserID="/UID=rgm"
DN=$countryName$stateOrProvinceName$localityName
DN=$DN$organizationName$organizationalUnitName$commonName$UserID
echo $DN
clientemail=rgm@example.com
export subjectAltName="email:$clientemail"
echo $subjectAltName
openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:prime256v1\
    -pkeyopt ec_param_enc:named_curve\
    -out $dir/private/$clientemail.key.$format
chmod 400 $dir/private/$clientemail.$format
openssl pkey -in $dir/private/$clientemail.key.$format -text -noout
openssl req -config $dir/openssl-intermediate.cnf\
    -key $dir/private/$clientemail.key.$format \
    -subj "$DN" -new -sha256 -out $dir/csr/$clientemail.csr.$format

openssl req -text -noout -verify\
    -in $dir/csr/$clientemail.csr.$format

openssl rand -hex $sn > $dir/serial # hex 8 is minimum, 19 is maximum
# Note 'openssl ca' does not support DER format
openssl ca -config $dir/openssl-intermediate.cnf -days 375\
    -extensions usr_cert -notext -md sha256 \
    -in $dir/csr/$clientemail.csr.$format\
    -out $dir/certs/$clientemail.cert.$format
chmod 444 $dir/certs/$clientemail.cert.$format

openssl verify -CAfile $dir/certs/ca-chain.cert.$format\
     $dir/certs/$clientemail.cert.$format
openssl x509 -noout -text -in $dir/certs/$clientemail.cert.$format

]]></artwork></figure>

</section>
</section>
<section anchor="Intermediate8021ARLevel" title="The 802.1AR Intermediate level">

<section anchor="Step8021AR" title="Setting up the 802.1AR Intermediate Certificate Environment">

<t>The next part is to create the 802.1AR Intermediate PKI
environment. This is very similar to the Intermediate PKI
environment. Modify the variables to suit your needs.</t>

<figure><artwork><![CDATA[
export dir=$cadir/8021ARintermediate
mkdir $dir
cd $dir
mkdir certs crl csr newcerts private
chmod 700 private
touch index.txt
sn=8 # hex 8 is minimum, 19 is maximum
echo 1000 > $dir/crlnumber

# cd $dir
countryName="/C=US"
stateOrProvinceName="/ST=MI"
localityName="/L=Oak Park"
organizationName="/O=HTT Consulting"
organizationalUnitName="/OU=Devices"
#organizationalUnitName=
commonName="/CN=802.1AR CA"
DN=$countryName$stateOrProvinceName$localityName$organizationName
DN=$DN$organizationalUnitName$commonName
echo $DN
export subjectAltName=email:postmaster@htt-consult.com
echo $subjectAltName

]]></artwork></figure>

<t>Create the file, $dir/openssl-8021AR.cnf from the contents in <xref target="Intermediate8021ARconfig"/>.</t>

</section>
<section anchor="Intermediate8021ARCert" title="Create the 802.1AR Intermediate Certificate">

<t>Here are the openssl commands to create the 802.1AR Intermediate
certificate keypair, 802.1AR Intermediate certificate signed
request (CSR), and the 802.1AR Intermediate certificate. Included
are commands to view the file contents.</t>

<figure><artwork><![CDATA[
# Create passworded keypair file

openssl genpkey -aes256 -algorithm ec\
    -pkeyopt ec_paramgen_curve:prime256v1 \
    -outform $format -pkeyopt ec_param_enc:named_curve\
    -out $dir/private/8021ARintermediate.key.$format
chmod 400 $dir/private/8021ARintermediate.key.$format
openssl pkey -inform $format\
    -in $dir/private/8021ARintermediate.key.$format -text -noout

# Create the CSR

openssl req -config $cadir/openssl-root.cnf\
    -key $dir/private/8021ARintermediate.key.$format \
    -keyform $format -outform $format -subj "$DN" -new -sha256\
    -out $dir/csr/8021ARintermediate.csr.$format
openssl req -text -noout -verify -inform $format\
    -in $dir/csr/8021ARintermediate.csr.$format


# Create 802.1AR Intermediate Certificate file
# The following does NOT work for DER

openssl rand -hex $sn > $dir/serial # hex 8 is minimum, 19 is maximum
# Note 'openssl ca' does not support DER format
openssl ca -config $cadir/openssl-root.cnf -days 3650\
    -extensions v3_intermediate_ca -notext -md sha256\
    -in $dir/csr/8021ARintermediate.csr.$format\
    -out $dir/certs/8021ARintermediate.cert.pem

chmod 444 $dir/certs/8021ARintermediate.cert.$format

openssl verify -CAfile $cadir/certs/ca.cert.$format\
     $dir/certs/8021ARintermediate.cert.$format

openssl x509 -noout -text\
     -in $dir/certs/8021ARintermediate.cert.$format

# Create the certificate chain file

cat $dir/certs/8021ARintermediate.cert.$format\
   $cadir/certs/ca.cert.$format > $dir/certs/ca-chain.cert.$format
chmod 444 $dir/certs/ca-chain.cert.$format
]]></artwork></figure>

</section>
<section anchor="Cert8021AR" title="Create an 802.1AR iDevID Certificate">

<t>Here are the openssl commands to create a 802.1AR iDevID
certificate keypair, iDevID certificate signed request (CSR), and
the iDevID certificate. Included are commands to view the file
contents.</t>

<figure><artwork><![CDATA[
DevID=Wt1234
countryName=
stateOrProvinceName=
localityName=
organizationName="/O=HTT Consulting"
organizationalUnitName="/OU=Devices"
commonName=
serialNumber="/serialNumber=$DevID"
DN=$countryName$stateOrProvinceName$localityName
DN=$DN$organizationName$organizationalUnitName$commonName
DN=$DN$serialNumber
echo $DN

# hwType is OID for HTT Consulting, devices, sensor widgets
export hwType=1.3.6.1.4.1.6715.10.1
export hwSerialNum=01020304 # Some hex
echo  $hwType - $hwSerialNum

openssl genpkey -algorithm ec -pkeyopt ec_paramgen_curve:prime256v1\
    -pkeyopt ec_param_enc:named_curve\
    -out $dir/private/$DevID.key.$format
chmod 400 $dir/private/$DevID.$format
openssl pkey -in $dir/private/$DevID.key.$format -text -noout
openssl req -config $dir/openssl-8021AR.cnf\
    -key $dir/private/$DevID.key.$format \
    -subj "$DN" -new -sha256 -out $dir/csr/$DevID.csr.$format

openssl req -text -noout -verify\
    -in $dir/csr/$DevID.csr.$format
openssl asn1parse -i -in $dir/csr/$DevID.csr.pem
# offset of start of hardwareModuleName and use that in place of 189
openssl asn1parse -i -strparse 189 -in $dir/csr/$DevID.csr.pem

openssl rand -hex $sn > $dir/serial # hex 8 is minimum, 19 is maximum
# Note 'openssl ca' does not support DER format
openssl ca -config $dir/openssl-8021AR.cnf -days 375\
    -extensions 8021ar_idevid -notext -md sha256 \
    -in $dir/csr/$DevID.csr.$format\
    -out $dir/certs/$DevID.cert.$format
chmod 444 $dir/certs/$DevID.cert.$format

openssl verify -CAfile $dir/certs/ca-chain.cert.$format\
     $dir/certs/$DevID.cert.$format
openssl x509 -noout -text -in $dir/certs/$DevID.cert.$format
openssl asn1parse -i -in $dir/certs/$DevID.cert.pem

# offset of start of hardwareModuleName and use that in place of 493
openssl asn1parse -i -strparse 493 -in $dir/certs/$DevID.cert.pem
]]></artwork></figure>

</section>
</section>
<section anchor="Footnotes" title="Footnotes">

<t>Creating this document was a real education in the state of
openSSL, X.509 certificate guidance, and just general level of
certificate awareness. Here are a few short notes.</t>

<section anchor="SerNum" title="Certificate Serial Number">

<t>The certificate serial number’s role is to provide yet another way
to maintain uniqueness of certificates within a PKI as well as a
way to index them in a data store. It has taken on other roles,
most notably as a defense.</t>

<t>The CABForum guideline for a public CA is for the serial number to
be a random number at least 8 octets long and no longer than 20
bytes. By default, openssl makes self-signed certificates with 8
octet serial numbers. This guide uses openssl’s RAND function to
generate the random value and pipe it into the -set_serial option.
This number MAY have the first bit as a ONE; the DER encoding rules
prepend such numbers with 0x00. Thus the limit of ‘19’ for the
variable ‘ns’.</t>

<t>A private CA need not follow the CABForum rules and can use
anything number for the serial number. For example, the root CA
(which has no security risks mitigated by using a random value)
could use ‘1’ as its serial number. Intermediate and End Entity
certificate serial numbers can also be of any value if a strong
hash, like SHA256 used here. A value of 4 for ns would provide a
sufficient population so that a CA of 10,000 EE certificates will
have only a 1.2% probability of a collision. For only 1,000
certificates the probability drops to 0.012%.</t>

<t>The following was proposed on the openssl-user list as an
alternative to using the RAND function:</t>

<t>Keep k bits (k/8 octets) long serial numbers for all your
certificates, chose a block cipher operating on blocks of k bits,
and operate this block cipher in CTR mode, with a proper secret key
and secret starting counter. That way, no collision detection is
necessary, you’ll be able to generate 2^(k/2) unique k bits longs
serial numbers (in fact, you can generate 2^k unique serial
numbers, but after 2^(k/2) you lose some security guarantees).</t>

<t>With 3DES, k=64, and with AES, k=128.</t>

</section>
<section anchor="SAN" title="subjectAltName support, or lack thereof">

<t>There is no direct openssl command line option to provide a
subjectAltName for a certificate. This is a serious limitation.
Per <xref target="RFC2818">RFC 2818</xref> SAN is the object for
providing email addresses and DNS addresses (FQDN), yet the common
practice has been to use the commonName object within the
distinguishedName object. How much of this is due to the
difficulty in creating certificates with a SAN?</t>

<t>Thus the only way to provide a SAN is through the config file. And
there are two approaches. This document uses an environment
variable to provide the SAN value into the config file. Another
approach is to use piping as in:</t>

<figure><artwork><![CDATA[
openssl req -new -sha256 -key domain.key\
 -subj "/C=US/ST=CA/O=Acme, Inc./CN=foo.com" -reqexts SAN\
  -config <(cat /etc/ssl/openssl.cnf\
   <(printf "[SAN]\nsubjectAltName=DNS:foo.com,DNS:www.foo.com"))\
  -out domain.csr
]]></artwork></figure>

</section>
<section anchor="DER" title="DER support, or lack thereof">

<t>The long, hard-fought battle with openssl to create a full DER pki
failed. The is no facility to create a DER certificate from a DER
CSR. It just is not there in the ‘openssl ca’ command. Even the
‘openssl x509 -req’ command cannot do this for a simple certificate.</t>

<t>Further, there is no ‘hack’ for making a certificate chain as there is
with PEM. With PEM a simple concatenation of the certificates create
a usable certificate chain. For DER, some recommend using
<xref target="RFC2315">PKCS#7</xref>, where others point out that this format is poorly
support ‘in the field’, whereas <xref target="RFC7292">PKCS#12</xref> works for them.</t>

<t>Finally, openssl does supports converting a PEM certificate to DER:</t>

<figure><artwork><![CDATA[
openssl x509 -outform der -in certificate.pem -out certificate.der
]]></artwork></figure>

<t>This should also work for the keypair. However, in a highly
constrained device it may make more sense to just store the raw
keypair in the device’s very limited secure storage.</t>

</section>
</section>
<section anchor="IANA" title="IANA Considerations">

<t>TBD. May be nothing for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>Creating certificates takes a lot of random numbers. A good source
of random numbers is critical. Studies have found excessive amount
of certificates, all with the same keys due to bad randomness on
the generating systems. The amount of entropy available for these
random numbers can be tested. On Fedora/Centos use:</t>

<figure><artwork><![CDATA[
cat /proc/sys/kernel/random/entropy_avail
]]></artwork></figure>

<t>If the value is low (below 1000) check your system’s randomness
source. Is rng-tools installed?  Consider adding an entropy
collection service like haveged from issihosts.com/haveged.</t>

<t>During the certificate creation, particularly during keypair
generation, the files are vulnerable to theft. This can be
mitigate using umask. Before using openssl, set umask:</t>

<figure><artwork><![CDATA[
restore_mask=$(umask -p)
umask 077
]]></artwork></figure>

<t>Afterwards, restore it with:</t>

<figure><artwork><![CDATA[
$restore_mask
]]></artwork></figure>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This work was jump started by the excellent RSA pki guide by Jamie
Nguyen. The openssl-user mailing list, with its many supportive
experts; in particular:  Rich Salz, Jakob Bolm, Viktor Dukhovni,
and Erwann Abalea, was of immense help as was the openssl man pages
website.</t>

<t>Finally, “Professor Google” was always ready to point to answers to
questions like: “openssl subjectAltName on the command line”. And
the Professor, it seems, never tires of answering even trivial
questions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC2315" target='https://www.rfc-editor.org/info/rfc2315'>
<front>
<title>PKCS #7: Cryptographic Message Syntax Version 1.5</title>
<author initials='B.' surname='Kaliski' fullname='B. Kaliski'><organization /></author>
<date year='1998' month='March' />
<abstract><t>This document describes a general syntax for data that may have cryptography applied to it, such as digital signatures and digital envelopes.  This memo provides information for the Internet community. It does not specify an Internet standard of any kind.</t></abstract>
</front>
<seriesInfo name='RFC' value='2315'/>
<seriesInfo name='DOI' value='10.17487/RFC2315'/>
</reference>



<reference  anchor="RFC2818" target='https://www.rfc-editor.org/info/rfc2818'>
<front>
<title>HTTP Over TLS</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2000' month='May' />
<abstract><t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2818'/>
<seriesInfo name='DOI' value='10.17487/RFC2818'/>
</reference>



<reference  anchor="RFC7292" target='https://www.rfc-editor.org/info/rfc7292'>
<front>
<title>PKCS #12: Personal Information Exchange Syntax v1.1</title>
<author initials='K.' surname='Moriarty' fullname='K. Moriarty' role='editor'><organization /></author>
<author initials='M.' surname='Nystrom' fullname='M. Nystrom'><organization /></author>
<author initials='S.' surname='Parkinson' fullname='S. Parkinson'><organization /></author>
<author initials='A.' surname='Rusch' fullname='A. Rusch'><organization /></author>
<author initials='M.' surname='Scott' fullname='M. Scott'><organization /></author>
<date year='2014' month='July' />
<abstract><t>PKCS #12 v1.1 describes a transfer syntax for personal identity information, including private keys, certificates, miscellaneous secrets, and extensions.  Machines, applications, browsers, Internet kiosks, and so on, that support this standard will allow a user to import, export, and exercise a single set of personal identity information.  This standard supports direct transfer of personal information under several privacy and integrity modes.</t><t>This document represents a republication of PKCS #12 v1.1 from RSA Laboratories' Public Key Cryptography Standard (PKCS) series.  By publishing this RFC, change control is transferred to the IETF.</t></abstract>
</front>
<seriesInfo name='RFC' value='7292'/>
<seriesInfo name='DOI' value='10.17487/RFC7292'/>
</reference>




    </references>


<section anchor="config" title="OpenSSL config files">

<section anchor="Rootconfig" title="OpenSSL Root config file">

<t>The following is the openssl-root.cnf file contents</t>

<figure><artwork><![CDATA[
# OpenSSL root CA configuration file.
# Copy to `$dir/openssl.cnf`.

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = $ENV::dir
cadir             = $ENV::cadir
format            = $ENV::format

certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = $cadir/private/ca.key.$format
certificate       = $cadir/certs/ca.cert.$format

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict
copy_extensions   = copy

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more
#   diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only
req_extensions      = req_ext

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name

# Optionally, specify some defaults.
# countryName_default             = US
# stateOrProvinceName_default     = MI
# localityName_default            = Oak Park
# 0.organizationName_default      = HTT Consulting
# organizationalUnitName_default  =

[ req_ext ]
subjectAltName = $ENV::subjectAltName

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
# keyUsage = critical, digitalSignature, cRLSign, keyCertSign
keyUsage = critical, cRLSign, keyCertSign
subjectAltName = $ENV::subjectAltName

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
# keyUsage = critical, digitalSignature, cRLSign, keyCertSign
keyUsage = critical, cRLSign, keyCertSign

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning

]]></artwork></figure>

</section>
<section anchor="Intermediateconfig" title="OpenSSL Intermediate Config File">

<t>The following is the openssl-intermediate.cnf file contents</t>

<figure><artwork><![CDATA[
# OpenSSL intermediate CA configuration file.
# Copy to `$dir/intermediate/openssl.cnf`.

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = $ENV::dir
cadir             = $ENV::cadir
format            = $ENV::format

certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The Intermediate key and Intermediate certificate.
private_key       = $dir/private/intermediate.key.$format
certificate       = $dir/certs/intermediate.cert.$format

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_loose
copy_extensions   = copy

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more
# diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = optional
UID                     = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only
req_extensions      = req_ext

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
UID                             = User ID

# Optionally, specify some defaults.
# countryName_default             = US
# stateOrProvinceName_default     = MI
# localityName_default            = Oak Park
# 0.organizationName_default      = HTT Consulting
# organizationalUnitName_default  =

[ req_ext ]
subjectAltName = $ENV::subjectAltName

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
# keyUsage = critical, digitalSignature, cRLSign, keyCertSign
keyUsage = critical, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
# keyUsage = critical, digitalSignature, cRLSign, keyCertSign
keyUsage = critical, cRLSign, keyCertSign

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical,nonRepudiation,digitalSignature,keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
]]></artwork></figure>

</section>
<section anchor="Intermediate8021ARconfig" title="OpenSSL 802.1AR Intermediate config file">

<t>The following is the openssl-8021ARintermediate.cnf file contents</t>

<figure><artwork><![CDATA[
# OpenSSL 8021ARintermediate CA configuration file.
# Copy to `$dir/8021ARintermediate/openssl_8021AR.cnf`.

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
# dir               = /root/ca/8021ARintermediate
dir               = $ENV::dir
cadir             = $ENV::cadir
format            = $ENV::format

certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = $dir/private/8021ARintermediate.key.$format
certificate       = $dir/certs/8021ARintermediate.cert.$format

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_enddate   = 99991231235959Z # per IEEE 802.1AR
preserve          = no
policy            = policy_loose
copy_extensions   = copy

[ policy_strict ]
# The root CA should only sign 8021ARintermediate
#   certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = optional

[ policy_loose ]
# Allow the 8021ARintermediate CA to sign
#   a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = optional
serialNumber            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only
req_extensions      = req_ext

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
serialNumber                    = Device Serial Number

# Optionally, specify some defaults.
0.organizationName_default      = HTT Consulting
organizationalUnitName_default  = Devices

[ req_ext ]
subjectAltName = otherName:1.3.6.1.5.5.7.8.4;SEQ:hmodname

[ hmodname ]
hwType = OID:$ENV::hwType
hwSerialNum = FORMAT:HEX,OCT:$ENV::hwSerialNum

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_8021ARintermediate_ca ]
# Extensions for a typical
#   8021ARintermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
# keyUsage = critical, digitalSignature, cRLSign, keyCertSign
keyUsage = critical, cRLSign, keyCertSign

[ 8021ar_idevid ]
# Extensions for IEEE 802.1AR iDevID
#   certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
]]></artwork></figure>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
i92qn3mrmNjRw0mkaKylWZJxtNgLZI2StJqRoE1dKOSvF3OCzBnOX6BsOo5D
FKW/O+qIoo4hadc7SbmUtDPbBCKRW991ybEy/YWVeMAJbLcOhxGCvw6CMQTF
iL1+f5vM3KFWe39wlOqVQiv2lbknJzIc4hMG1WeuUefZdACfUofjFKxFNghx
WwWcmDljFg97oo3dUKz1C0hN+6XzvkNufDg+DZGF6G6/3FYCoru9v20EtHbK
URk4xJQhk2aG0rHAeVFio0wKo/2SOhZZjoN9I/PukAnsWcGf6HdOrCmiSmhZ
zAsm0q+uhlTsCJ68ZK6MuuTx/nhCTOzRRAO4GsC1JYCKM2gNDrJmAdDlqv13
JK80lpYfpsbvPDpnfdrvnRNJdeBJMsv4WLStwwkjk6ab8hZmyGjFMLakm4IM
XWh1pJQQBt1qXt4gcEMKkWjJPD2iD03aOcpSm8k4LFvdjYu3G8odkJsDPCF/
YTw8uKr0bTojO03rlHwJrfuw0J1gwwbrrT1kCZIkaELZtYbhSKjELi1tl0Nt
2vv792BlycZ9+GBUeQmgyHqJ0cVs4glxyjmZI4mITUqJJuT0J+FwUa0vioxD
3g1co0bVOFcckFPJl3g8Rxnura/njt1wviFrAfIdvHGTBKkDgvCdzMZi6Th2
rWMdzuBlNV2dIKfbdINxFJOhnSo9/E+SJ6Wa6BCRU6iH1zM3dqc05po8sVvd
IcJPNQ27bZuuRFJoALUlemB57DXxYweJfU9AFOOEaMZ6kHFqwW01cIx5eUrs
el8vuynZkSTii6UQsevHqWYKMjbDiJbhFMjr62DUNJ75EhsA79T1+RNak+fe
JaoLub7Tbpz8ruqDkhIiNm6bxlaB+1j/XTWF8+o5VpCjmolOr8Vwkshu7eTj
wTdNUhpqKwl3bWfaWHXfCzQp9bsPmTQrWRi1QSZnww4hq6+a75CObfKWefPN
ZOIy5xjPDNmt2yfXQ9eOymnLHgOmwYecaM5mgRGBXUO41ePtLGUSVsHNspjs
ol6EawfeC31xkDGjJvlUIbN1qssPrXNd4x5WWaTEWFW/EQqm5DaG2CVeESx7
jRWAiy6kU7iQ6pEu5Ba7AHt+CfzP6CXCMVSbsIRkTxEU+aE/zaYN2FAOPt/h
q3hD7X0C9AdDvTgI2TiCNnZNi36bjTg/xnVb8tnqfLkHXDdhnvutVRnP91mt
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
+JF6/QQyDt2fHJObw6mCLgG9Nt/RtfjGQ4oSMMA7r9HW4SOU4dhg9U9XbR2f
/7nT4SN87mK7beUWUzimrt2m/+UE4kKPPK/tDOPgujqFbY4pRtZzPpub5F1M
oz3ZWFQCXBxeOtIoQfryDCYQR2bk5PTseKndvmZrQcnbM61MQ4QjwGW8WPnD
Fm+7Ro8cmBwdWFUjo6SyF0bUHjaQnH/17lusbw1BWf8QVfPzmDVoNQc1cUp0
ifCmC08aB/ymARQqvWjifuZZwYSgIjQFtT3ZZ8/mVa/ZlkpvM2I/ZBfhFXPs
h7YDNo2kV1o5kKlXLEQCP8fB+9trvNUtLXLo5swOJNzTbCHL0qT5yfNnDtfq
iW8rXBNGziwK/OGdUuXH8uza1CFHBcwqMrpcFRNSV+nJgpfzC8m8cWw5fkfq
XPkrThFKWWLS1ulw0mIX0ZQXuzg7PfxenVxcvu5d5dVXSStajdAqn5FYoCtD
qzs2UWlfPIGwOL7+QALaJROEQs9FvmRhCXmXAlVBhCQXMNXLc+AVtKAQVCTo
ctmJR2V25aFyYGLrQy34qGuhDI0/Ecpym3gf7vKFr0Zf3qV8rmMFlNVIru3y
SXhGIuVHNkBFgXbeOzX8hCLogdph9sH33UISOcWZQzzYf/qimuu6Ds16aNz1
cosDGQjH7I6VVkah4QuuqotRVY1iYUGnfKryKKuPTXVs52GvxfMQJosjIiVx
TA7TT6Tyr4OHi4vrSmUcg9GaDTOSwXW/n6TpLOnsUYDRmvs3/gyM3CJ67uHb
XukN57WpHnxtzlH9YTULFts6lB6Ku+wcqECnUgrV07sr2bMY3pf3u7GyfRjQ
SqYtBp6ZHtJ/v7WKh23/i1K7jFnF0vVjyFyjiwxdxepltPAPF8hBd8vt4tcm
Mz3EqQPOxxheYR1RQnbuLFWhvu1TtxqkVrp38VMfm6qMwjpw3eJHQjbVMv6q
Q7oLp7Rw5KAWfcWwruVNnHz4cTEJb12yxTsBPwhfM/ceFywvebj0boZEAXSw
6AhIBvqz8wptYcB9p+9O+WcBRj7xYhdp9In5rRXCyGIruT6+15G4okERbUae
CBf6PrQpnDRhB0PyFA2av8M/c7OJoW8TFMwtN5tfGECNIC4k3lDDyzN8a6A/
BA5fnNqxtT0fg7vF4733InLRsv0WsIrcQDqhgLez/4shGLGMuI9VfDG6Di/P
klWYqd99t7x3AI+GyawGMqr+15Vst9NhGGapQRsh66R31j/+BNpYoqyFYoft
j6e97+p6YyOmJJZTeqVgg8zquXuJaE8koq0pPvVAZLtc1qoa4S4EuIssvk6g
Wx7zJer9jUa9Faay0e/Ke1D1UfBaha5qo+E1C+t8iYp/6aiYA7gvQfGvHxR/
CYnXwvLb0yNV9+dL1Ky+RM3/ylHzKsEoeqOqjDo9+hJff4mvPzn8+xI5fzTq
8mo1NQgbLhWzWhlK3xfkhgkm5Mt6XQPTFANEEx9oSqllwwZ935ozrp6tplXS
1xs/U8gcRuGlnmXgCJxcWMI0jTkO5TwxH2CsC6h5sT1agtkd6SBzPBiILpeH
q8F1slRP8tNxLTAfQrKpZPl5kWzTJ2vy8Rrolc0AvV8SPp8x4bOc76mvSlI5
ybCyassD2Z+6e/EP5oCWB62bCVoeafNB18UdyJ83LYRIajkxZH94qa4U05dE
0s9+fOIxZWbuTx+tUT3iSxLpcUkkUlueYLurXtKf9sET+v+zl89e/ofaxM88
q/IPgf8Wckw1QoxTBV+yTTbbVK/BTc6JcSV5py9Zp/WwXS7PsZogX7JOX7JO
peH/ClmnVYJR9JYiPNVqAGumoB6dBXowB2RWkzyQC+K7PPjcsWVzntH/nrde
tJ7+rn/8pw4KZ4QmP2Q/ExxTH6eLUj0d8QHlkVOql0PNokQ7r47/2rg4vMp7
lkrq/FOlnT4lcyI7XTZXD22ebVi9lfst4ORXSi1VK8jU4K/syNmiYUue00ck
QX6JDMWXHMRnzkH8PzB2PWWMjAAA

-->

</rfc>

